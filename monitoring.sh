#!/bin/bash

# –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ video proxy
# –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ cron –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞

LOG_FILE="/var/log/video-proxy-monitor.log"
DOMAIN="video.full.com"
ALERT_EMAIL="admin@${DOMAIN}"
CACHE_DIR="/var/cache/nginx/video"

# –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a $LOG_FILE
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Nginx
check_nginx_status() {
    if systemctl is-active --quiet nginx; then
        log "‚úÖ Nginx –∞–∫—Ç–∏–≤–µ–Ω"
        return 0
    else
        log "‚ùå Nginx –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω!"
        return 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ endpoint'–∞
check_health_endpoint() {
    local response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost/health 2>/dev/null)
    if [ "$response" = "200" ]; then
        log "‚úÖ Health endpoint –¥–æ—Å—Ç—É–ø–µ–Ω (HTTP $response)"
        return 0
    else
        log "‚ùå Health endpoint –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (HTTP $response)"
        return 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
check_ssl_certificate() {
    if [ -f "/etc/letsencrypt/live/${DOMAIN}/fullchain.pem" ]; then
        local expiry_date=$(openssl x509 -in "/etc/letsencrypt/live/${DOMAIN}/fullchain.pem" -noout -enddate | cut -d= -f2)
        local expiry_epoch=$(date -d "$expiry_date" +%s)
        local current_epoch=$(date +%s)
        local days_left=$(( (expiry_epoch - current_epoch) / 86400 ))
        
        if [ $days_left -gt 30 ]; then
            log "‚úÖ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –≤–∞–ª–∏–¥–µ–Ω ($days_left –¥–Ω–µ–π –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è)"
            return 0
        elif [ $days_left -gt 7 ]; then
            log "‚ö†Ô∏è  SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ $days_left –¥–Ω–µ–π"
            return 1
        else
            log "‚ùå SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ $days_left –¥–Ω–µ–π!"
            return 2
        fi
    else
        log "‚ùå SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
        return 3
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∏—Å–∫–∞ –¥–ª—è –∫—ç—à–∞
check_cache_size() {
    if [ -d "$CACHE_DIR" ]; then
        local cache_size=$(du -s $CACHE_DIR | awk '{print $1}')
        local cache_size_gb=$((cache_size / 1024 / 1024))
        local disk_usage=$(df $CACHE_DIR | awk 'NR==2 {print $5}' | sed 's/%//')
        
        log "üìä –†–∞–∑–º–µ—Ä –∫—ç—à–∞: ${cache_size_gb}GB, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞: ${disk_usage}%"
        
        if [ $disk_usage -gt 90 ]; then
            log "‚ö†Ô∏è  –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞: ${disk_usage}%"
            return 1
        elif [ $disk_usage -gt 80 ]; then
            log "‚ö†Ô∏è  –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞: ${disk_usage}%"
            return 1
        fi
        return 0
    else
        log "‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∫—ç—à–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        return 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
check_performance() {
    local connections=$(netstat -an | grep :443 | wc -l)
    local load_avg=$(uptime | awk -F'load average:' '{print $2}' | awk '{print $1}' | sed 's/,//')
    local memory_usage=$(free | awk 'NR==2{printf "%.1f", $3*100/$2}')
    
    log "üìà –ê–∫—Ç–∏–≤–Ω—ã–µ HTTPS —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: $connections"
    log "üìà Load Average: $load_avg"
    log "üìà –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: ${memory_usage}%"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    if (( $(echo "$load_avg > 5.0" | bc -l) )); then
        log "‚ö†Ô∏è  –í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞: $load_avg"
        return 1
    fi
    
    if (( $(echo "$memory_usage > 90.0" | bc -l) )); then
        log "‚ö†Ô∏è  –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: ${memory_usage}%"
        return 1
    fi
    
    return 0
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ –Ω–∞ –æ—à–∏–±–∫–∏
check_error_logs() {
    local recent_errors=$(tail -100 /var/log/nginx/error.log | grep "$(date '+%Y/%m/%d')" | grep -E "(error|crit|alert|emerg)" | wc -l)
    
    if [ $recent_errors -gt 0 ]; then
        log "‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ $recent_errors –æ—à–∏–±–æ–∫ –≤ –ª–æ–≥–∞—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è"
        log "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏:"
        tail -10 /var/log/nginx/error.log | grep -E "(error|crit|alert|emerg)" | tail -3 | while read line; do
            log "  $line"
        done
        return 1
    else
        log "‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –≤ –ª–æ–≥–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        return 0
    fi
}

# –¢–µ—Å—Ç –ø—Ä–æ–∫—Å–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
test_proxy_functionality() {
    if [ "$1" = "--test-proxy" ]; then
        log "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏..."
        
        # –¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ endpoint'–∞
        local test_response=$(curl -s -o /dev/null -w "%{http_code}:%{time_total}" "https://${DOMAIN}/health" 2>/dev/null)
        local http_code=$(echo $test_response | cut -d: -f1)
        local response_time=$(echo $test_response | cut -d: -f2)
        
        if [ "$http_code" = "200" ]; then
            log "‚úÖ HTTPS endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç (–≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${response_time}s)"
        else
            log "‚ùå HTTPS endpoint –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (HTTP $http_code)"
            return 1
        fi
    fi
    return 0
}

# –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤
cleanup_old_logs() {
    if [ "$1" = "--cleanup" ]; then
        log "üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞..."
        find /var/log -name "video-proxy-monitor.log.*" -mtime +30 -delete
        
        # –†–æ—Ç–∞—Ü–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ª–æ–≥–∞ –µ—Å–ª–∏ –æ–Ω –±–æ–ª—å—à–µ 10MB
        if [ -f "$LOG_FILE" ]; then
            local log_size=$(stat -f%z "$LOG_FILE" 2>/dev/null || stat -c%s "$LOG_FILE" 2>/dev/null)
            if [ $log_size -gt 10485760 ]; then  # 10MB
                mv "$LOG_FILE" "${LOG_FILE}.$(date +%Y%m%d_%H%M%S)"
                log "–õ–æ–≥ —Ä–æ—Ç–∏—Ä–æ–≤–∞–Ω –∏–∑-–∑–∞ —Ä–∞–∑–º–µ—Ä–∞"
            fi
        fi
    fi
}

# –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ mail)
send_alert() {
    local message="$1"
    local severity="$2"
    
    if command -v mail &> /dev/null && [ -n "$ALERT_EMAIL" ]; then
        echo "$message" | mail -s "Video Proxy Alert [$severity]" "$ALERT_EMAIL"
        log "üìß –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ $ALERT_EMAIL"
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
main_monitoring() {
    log "üîç –ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã..."
    
    local issues=0
    local critical_issues=0
    
    # –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    check_nginx_status || ((issues++))
    check_health_endpoint || ((issues++))
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ SSL
    check_ssl_certificate
    local ssl_status=$?
    if [ $ssl_status -eq 2 ] || [ $ssl_status -eq 3 ]; then
        ((critical_issues++))
    elif [ $ssl_status -eq 1 ]; then
        ((issues++))
    fi
    
    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    check_cache_size || ((issues++))
    check_performance || ((issues++))
    check_error_logs || ((issues++))
    test_proxy_functionality "$1" || ((critical_issues++))
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    if [ $critical_issues -gt 0 ]; then
        log "üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´: $critical_issues, –û–±—ã—á–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã: $issues"
        send_alert "Video proxy –∏–º–µ–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏." "CRITICAL"
        exit 2
    elif [ $issues -gt 0 ]; then
        log "‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: $issues"
        send_alert "Video proxy –∏–º–µ–µ—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–±–ª–µ–º—ã. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞." "WARNING"
        exit 1
    else
        log "‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ"
        exit 0
    fi
}

# –ü–æ–∫–∞–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
show_usage() {
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–æ–ø—Ü–∏–∏]"
    echo ""
    echo "–û–ø—Ü–∏–∏:"
    echo "  --test-proxy    –í–∫–ª—é—á–∏—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"
    echo "  --cleanup      –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏"
    echo "  --help         –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
    echo ""
    echo "–ü—Ä–∏–º–µ—Ä—ã:"
    echo "  $0                    # –ë–∞–∑–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"
    echo "  $0 --test-proxy      # –ü–æ–ª–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å —Ç–µ—Å—Ç–æ–º –ø—Ä–æ–∫—Å–∏"
    echo "  $0 --cleanup         # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ + –æ—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤"
    echo ""
    echo "–î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–æ–±–∞–≤—å—Ç–µ –≤ crontab:"
    echo "  */5 * * * * /root/monitoring.sh >/dev/null 2>&1"
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
case "$1" in
    --help|-h)
        show_usage
        exit 0
        ;;
    *)
        cleanup_old_logs "$1"
        main_monitoring "$1"
        ;;
esac